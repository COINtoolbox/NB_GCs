<<<<<<< Updated upstream
errN_GC = GCS$N_GC_err,
N = nrow(GCS),
errMBH = upMBH,
MBHx = MBHx,
M = 500
)
model.NB <- "model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Prior for size
size~dunif(0.001,5)
# Hyperpriors
#meanx ~ dgamma(30,3)
#varx ~ dgamma(2,1)
meanx ~ dgamma(85,10)
varx ~ dgamma(2,1)
for (i in 1:N){
#MBHtrue[i]~dunif(5,12)
# MBHtrue[i]~dnorm(8,0.000001) # this would be sensible too
MBHtrue[i] ~ dgamma(meanx^2/varx,meanx/varx)T(6,11)
}
# Likelihood function
for (i in 1:N){
MBH[i]~dnorm(MBHtrue[i],1/errMBH[i]^2);
errorN[i]~dbin(0.5,2*errN_GC[i])
eta[i]<-beta.0+beta.1*MBHtrue[i]
log(mu[i])<-log(exp(eta[i])+errorN[i]-errN_GC[i])
#log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
p[i]<-size/(size+mu[i])
N_GC[i]~dnegbin(p[i],size)
# Prediction
etaTrue[i]<-beta.0+beta.1*MBHtrue[i]
log(muTrue[i])<-max(-20,min(20,etaTrue[i]))
pTrue[i]<-size/(size+muTrue[i])
prediction.NB[i]~dnegbin(pTrue[i],size)
#prediction.NB[i]~dnegbin(p[i],size)
# Discrepancy measures
YNew[i] ~ dnegbin(p[i],size)
expY[i] <- mu[i]
varY[i] <- mu[i] + pow(mu[i],2) / size
PRes[i] <-(N_GC[i] - expY[i])/sqrt(varY[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
# Prediction for new data
for (j in 1:M){
etax[j]<-beta.0+beta.1*MBHx[j]
log(mux[j])<-max(-20,min(20,etax[j]))
px[j]<-size/(size+mux[j])
prediction.NBx[j]~dnegbin(px[j],size)
}
}"
inits1 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits2 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits3 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
params <- c("beta.0","beta.1","size","prediction.NB","MBHtrue","Fit","New","prediction.NBx")
#inits1<-function(){list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))}
#jags.neg <- jags.model(
#  data = jags.data,
#  inits = inits,
#  textConnection(model.NB),
#  n.chains = 3,
#  n.adapt=1000
#)
library(parallel)
cl <- makeCluster(3)
jags.neg <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model.NB,
n.chains = 3,
adapt=5000,
monitor=params,
burnin=15000,
sample=25000,
summarise=FALSE,
plots=FALSE
)
jagssamples.nb <- as.mcmc.list(jags.neg )
MBHtrue<-summary(as.mcmc.list(jags.neg, vars="MBHtrue"),quantiles=0.5)
pred.NBerr<-summary(as.mcmc.list(jags.neg, vars="prediction.NB"),quantiles=c(0.005,0.025,0.25,0.5,0.75,0.975, 0.995))
pred.NB2err<-data.frame(Type=GCS$Type,NGC=GCS$N_GC,MBHtrue=MBHtrue$quantiles,MBH=GCS$MBH,mean=pred.NBerr$statistics[1:45,1],lwr1=pred.NBerr$quantiles[1:45,3],lwr2=pred.NBerr$quantiles[1:45,2],lwr3=pred.NBerr$quantiles[1:45,1],upr1=pred.NBerr$quantiles[1:45,5],upr2=pred.NBerr$quantiles[1:45,6],upr3=pred.NBerr$quantiles[1:45,7])
pred.NBerrx<-summary(as.mcmc.list(jags.neg,vars="prediction.NBx"),quantiles=c(0.005,0.025,0.25,0.5,0.75,0.975, 0.995))
pred.NB2errx<-data.frame(MBHx=MBHx,mean=pred.NBerrx$statistics[,1],lwr1=pred.NBerrx$quantiles[,3],lwr2=pred.NBerrx$quantiles[,2],lwr3=pred.NBerrx$quantiles[,1],upr1=pred.NBerrx$quantiles[,5],upr2=pred.NBerrx$quantiles[,6],upr3=pred.NBerrx$quantiles[,7])
asinh_trans <- function(){
trans_new(name = 'asinh', transform = function(x) asinh(x),
inverse = function(x) sinh(x))
}
#N_low<-asinh(pred.NB2err$NGC-N_err)
N_low<-pred.NB2err$NGC-N_err
N_low[N_low<0]<-0
ggplot(pred.NB2err,aes(x=MBH,y=NGC))+
geom_ribbon(data=pred.NB2errx,aes(x=MBHx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.3, fill="gray") +
geom_ribbon(data=pred.NB2errx,aes(x=MBHx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.2, fill="gray") +
geom_ribbon(data=pred.NB2errx,aes(x=MBHx,y=mean,ymin=lwr3, ymax=upr3), alpha=0.1, fill="gray") +
geom_point(aes(colour=Type,shape=Type),size=3.25)+
geom_errorbar(guide="none",aes(colour=Type,ymin=N_low,ymax=NGC+N_err),alpha=0.7,width=0.05)+
geom_errorbarh(guide="none",aes(colour=Type,xmin=MBH-GCS$lowMBH,
xmax=MBH+upMBH),alpha=0.7,height=0.05)+
geom_line(data=pred.NB2errx,aes(x=MBHx,y=mean),colour="gray25",linetype="dashed",size=1.2)+
scale_y_continuous(trans = 'asinh',breaks=c(0,10,100,1000,10000,100000),labels=c("0",expression(10^1),expression(10^2),
expression(10^3),expression(10^4),expression(10^5)))+
#  scale_y_continuous(trans = 'log10',breaks=trans_breaks("log10",function(x) 10^x),
#                     labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+
scale_shape_manual(values=c(19,2,8))+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_hc()+
ylab(expression(N[GC]))+
xlab(expression(log~M[BH]/M['\u0298']))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
jagssamples.nb
S.NB1<-ggs(jagssamples.nb ,family=c("beta"))
S.NB2<-ggs(jagssamples.nb,family=c("size"))
S.NB<-rbind(S.NB1,S.NB2,deparse.level=2)
S.NB$Parameter<-revalue(S.NB$Parameter, c("beta.0"=expression(beta[0]), "beta.1"=expression(beta[1]),
"size"="k"))
g1<-ggs_density(S.NB)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+xlab("Parameter  value")+ylab("Density")
g1
ggs_traceplot(S.NB)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
ylab("Parameter value")+
xlab("Iteration")+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
cl <- makeCluster(3)
jags.neg <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model.NB,
n.chains = 3,
adapt=2000,
monitor=params,
burnin=15000,
sample=25000,
summarise=T,
plots=FALSE
)
jags.neg
jags.neg$statistics
summary(jags.neg)
jags.neg
Pred<-ggs(codasamples.nb,family=c("New"))[,"value"]
Obs<-ggs(codasamples.nb,family=c("Fit"))[,"value"]
sqrt(mean((Pred-Obs)^2))
Pred<-ggs(jagssamples.nb,family=c("New"))[,"value"]
Obs<-ggs(jagssamples.nb,family=c("Fit"))[,"value"]
sqrt(mean((Pred-Obs)^2))
dic.samples(jags.neg, params, n.iter = 50000,type="pD")
dic.samples(jagssamples.nb, params, n.iter = 50000,type="pD")
jags.neg <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model.NB,
n.chains = 3,
adapt=2000,
monitor=params,
add.monitor="dic",
burnin=15000,
sample=25000,
summarise=FALSE,
plots=FALSE
=======
library(COUNT)
data(rwm1984)
R84 <- rwm1984
R84$cage <- R84$age - mean(R84$age)
R84$cdoc <- R84$docvis - mean(R84$docvis)
X <- model.matrix(~ cdoc + female + kids + cage,
data = R84)
K <- ncol(X)
win.data <- list(Y    = R84$outwork,
N    = nrow(R84),
X    = X,
K    = K,
LogN = log(nrow(R84)),
b0   = rep(0, K),
B0   = diag(0.00001, K)
>>>>>>> Stashed changes
)
jags.neg <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model.NB,
n.chains = 3,
adapt=2000,
monitor=c(params,"dic"),
burnin=15000,
sample=25000,
summarise=FALSE,
plots=FALSE
)
model.NB <- "model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Prior for size
size~dunif(0.001,5)
# Hyperpriors
#meanx ~ dgamma(30,3)
#varx ~ dgamma(2,1)
#meanx ~ dgamma(85,10)
#varx ~ dgamma(2,1)
meanx ~ dgamma(0.01,0.01)
varx ~ dgamma(0.01,0.01)
for (i in 1:N){
#MBHtrue[i]~dunif(5,12)
# MBHtrue[i]~dnorm(8,0.000001) # this would be sensible too
#MBHtrue[i] ~ dgamma(meanx^2/varx,meanx/varx)T(6,11)
MBHtrue[i] ~ dgamma(meanx^2/varx,meanx/varx)
}
# Likelihood function
for (i in 1:N){
MBH[i]~dnorm(MBHtrue[i],1/errMBH[i]^2);
errorN[i]~dbin(0.5,2*errN_GC[i])
eta[i]<-beta.0+beta.1*MBHtrue[i]
log(mu[i])<-log(exp(eta[i])+errorN[i]-errN_GC[i])
#log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
p[i]<-size/(size+mu[i])
N_GC[i]~dnegbin(p[i],size)
# Prediction
etaTrue[i]<-beta.0+beta.1*MBHtrue[i]
log(muTrue[i])<-max(-20,min(20,etaTrue[i]))
pTrue[i]<-size/(size+muTrue[i])
prediction.NB[i]~dnegbin(pTrue[i],size)
#prediction.NB[i]~dnegbin(p[i],size)
# Discrepancy measures
YNew[i] ~ dnegbin(p[i],size)
expY[i] <- mu[i]
varY[i] <- mu[i] + pow(mu[i],2) / size
PRes[i] <-(N_GC[i] - expY[i])/sqrt(varY[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
# Prediction for new data
for (j in 1:M){
etax[j]<-beta.0+beta.1*MBHx[j]
log(mux[j])<-max(-20,min(20,etax[j]))
px[j]<-size/(size+mux[j])
prediction.NBx[j]~dnegbin(px[j],size)
}
}"
inits1 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits2 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits3 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
params <- c("beta.0","beta.1","size","prediction.NB","MBHtrue","Fit","New","prediction.NBx")
#inits1<-function(){list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))}
#jags.neg <- jags.model(
#  data = jags.data,
#  inits = inits,
#  textConnection(model.NB),
#  n.chains = 3,
#  n.adapt=1000
#)
library(parallel)
cl <- makeCluster(3)
jags.neg <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model.NB,
n.chains = 3,
adapt=2000,
monitor=c(params,"dic"),
burnin=15000,
sample=25000,
summarise=FALSE,
plots=FALSE
)
#update(jags.neg, 10000)
#jagssamples.nb <- jags.samples(jags.neg3, params, n.iter = 50000)
jagssamples.nb <- as.mcmc.list(jags.neg )
MBHtrue<-summary(as.mcmc.list(jags.neg, vars="MBHtrue"),quantiles=0.5)
pred.NBerr<-summary(as.mcmc.list(jags.neg, vars="prediction.NB"),quantiles=c(0.005,0.025,0.25,0.5,0.75,0.975, 0.995))
pred.NB2err<-data.frame(Type=GCS$Type,NGC=GCS$N_GC,MBHtrue=MBHtrue$quantiles,MBH=GCS$MBH,mean=pred.NBerr$statistics[1:45,1],lwr1=pred.NBerr$quantiles[1:45,3],lwr2=pred.NBerr$quantiles[1:45,2],lwr3=pred.NBerr$quantiles[1:45,1],upr1=pred.NBerr$quantiles[1:45,5],upr2=pred.NBerr$quantiles[1:45,6],upr3=pred.NBerr$quantiles[1:45,7])
pred.NBerrx<-summary(as.mcmc.list(jags.neg,vars="prediction.NBx"),quantiles=c(0.005,0.025,0.25,0.5,0.75,0.975, 0.995))
pred.NB2errx<-data.frame(MBHx=MBHx,mean=pred.NBerrx$statistics[,1],lwr1=pred.NBerrx$quantiles[,3],lwr2=pred.NBerrx$quantiles[,2],lwr3=pred.NBerrx$quantiles[,1],upr1=pred.NBerrx$quantiles[,5],upr2=pred.NBerrx$quantiles[,6],upr3=pred.NBerrx$quantiles[,7])
ggplot(pred.NB2err,aes(x=MBH,y=NGC))+
geom_ribbon(data=pred.NB2errx,aes(x=MBHx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.3, fill="gray") +
geom_ribbon(data=pred.NB2errx,aes(x=MBHx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.2, fill="gray") +
geom_ribbon(data=pred.NB2errx,aes(x=MBHx,y=mean,ymin=lwr3, ymax=upr3), alpha=0.1, fill="gray") +
geom_point(aes(colour=Type,shape=Type),size=3.25)+
geom_errorbar(guide="none",aes(colour=Type,ymin=N_low,ymax=NGC+N_err),alpha=0.7,width=0.05)+
geom_errorbarh(guide="none",aes(colour=Type,xmin=MBH-GCS$lowMBH,
xmax=MBH+upMBH),alpha=0.7,height=0.05)+
geom_line(data=pred.NB2errx,aes(x=MBHx,y=mean),colour="gray25",linetype="dashed",size=1.2)+
scale_y_continuous(trans = 'asinh',breaks=c(0,10,100,1000,10000,100000),labels=c("0",expression(10^1),expression(10^2),
expression(10^3),expression(10^4),expression(10^5)))+
#  scale_y_continuous(trans = 'log10',breaks=trans_breaks("log10",function(x) 10^x),
#                     labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+
scale_shape_manual(values=c(19,2,8))+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_hc()+
ylab(expression(N[GC]))+
xlab(expression(log~M[BH]/M['\u0298']))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
S.NB1<-ggs(jagssamples.nb ,family=c("beta"))
S.NB2<-ggs(jagssamples.nb,family=c("size"))
S.NB<-rbind(S.NB1,S.NB2,deparse.level=2)
S.NB$Parameter<-revalue(S.NB$Parameter, c("beta.0"=expression(beta[0]), "beta.1"=expression(beta[1]),
"size"="k"))
g1<-ggs_density(S.NB)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+xlab("Parameter  value")+ylab("Density")
g1
NGC = 20  # the observed count
errN_GC = 5 # the +/- error
mybreaks = seq(NGC-errN_GC-0.5,NGC+errN_GC+0.5,1) # for the plots
# error distribution: centered at zero
error = rbinom(10000, 2 * errN_GC, 0.5) - errN_GC
hist(error,breaks=mybreaks-N)
abline(v=mean(error),col="red")
N = 20  # the observed count
errN_GC = 5 # the +/- error
mybreaks = seq(NGC-errN_GC-0.5,NGC+errN_GC+0.5,1) # for the plots
# error distribution: centered at zero
error = rbinom(10000, 2 * errN_GC, 0.5) - errN_GC
hist(error,breaks=mybreaks-N)
abline(v=mean(error),col="red")
rbinom(10000, 2 * errN_GC, 0.5)
hist(rbinom(10000, 2 * errN_GC, 0.5))
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/NB_GCs/Models_each_predictor")
#Poisson and NB regression using JAGS by Rafael S. de Souza, Bart Buelens, Ewan Cameron
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
require(runjags)
# Function to allow parse labels in facet_wrap
facet_wrap_labeller <- function(gg.plot,labels=NULL) {
#works with R 3.0.1 and ggplot2 0.9.3.1
require(gridExtra)
g <- ggplotGrob(gg.plot)
gg <- g$grobs
strips <- grep("strip_t", names(gg))
for(ii in seq_along(labels))  {
modgrob <- getGrob(gg[[strips[ii]]], "strip.text",
grep=TRUE, global=TRUE)
gg[[strips[ii]]]$children[[modgrob$name]] <- editGrob(modgrob,label=labels[ii])
}
g$grobs <- gg
class(g) = c("arrange", "ggplot",class(g))
g
}
give.n <- function(x){
return(c(y = 0.5, label = length(x)))
# experiment with the multiplier to find the perfect position
}
################
# Script starts here
# Read data
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
N_err<-GCS$N_GC_err
N = nrow(GCS)
######## NB with errors ########################################################
Mdynx = seq(from = 0.95 * min(GCS$Mdyn),
to = 1.05 * max(GCS$Mdyn),
length.out = 500)
jags.data <- list(
N_GC = GCS$N_GC,
Mdyn = GCS$Mdyn,
errN_GC = GCS$N_GC_err,
N = nrow(GCS),
Mdynx = Mdynx,
M = 500
)
model.NB <- "model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
=======
beta.2~dnorm(0,0.000001)
tau.R~dgamma(0.01,0.01)
>>>>>>> origin/master
>>>>>>> Stashed changes
# Prior for size
size~dunif(0.001,5)
# Likelihood function
for (i in 1:N){
errorN[i]~dbin(0.5,2*errN_GC[i])
eta[i]<-beta.0+beta.1*Mdyn[i]
#log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
log(mu[i])<-log(exp(eta[i])+errorN[i]-errN_GC[i])
p[i]<-size/(size+mu[i])
N_GC[i]~dnegbin(p[i],size)
# Prediction
etaTrue[i]<-beta.0+beta.1*Mdyn[i]
log(muTrue[i])<-max(-20,min(20,etaTrue[i]))
pTrue[i]<-size/(size+muTrue[i])
prediction.NB[i]~dnegbin(pTrue[i],size)
# Discrepancy measures
YNew[i] ~ dnegbin(p[i],size)
expY[i] <- mu[i]
varY[i] <- mu[i] + pow(mu[i],2) / size
PRes[i] <-(N_GC[i] - expY[i])/sqrt(varY[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
# Prediction for new data
for (j in 1:M){
etax[j]<-beta.0+beta.1*Mdynx[j]
log(mux[j])<-max(-20,min(20,etax[j]))
px[j]<-size/(size+mux[j])
prediction.NBx[j]~dnegbin(px[j],size)
}
}"
#inits <- list(beta.0=0,beta.1=0,size=0.1)
inits1 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits2 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits3 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
params <- c("beta.0","beta.1","size","PRes","prediction.NB","Fit","New","prediction.NBx")
library(parallel)
cl <- makeCluster(3)
jags.neg <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model.NB,
n.chains = 3,
adapt=2500,
monitor=c(params),
burnin=20000,
sample=30000,
summarise=FALSE,
thin=5,
plots=FALSE
)
<<<<<<< Updated upstream
jagssamples.nb <- as.mcmc.list(jags.neg )
S.NB1<-ggs(jagssamples.nb ,family=c("beta"))
S.NB2<-ggs(jagssamples.nb,family=c("size"))
S.NB<-rbind(S.NB1,S.NB2,deparse.level=2)
S.NB$Parameter<-revalue(S.NB$Parameter, c("beta.0"=expression(beta[0]), "beta.1"=expression(beta[1]),
"size"="k"))
ggs_autocorrelation(S.NB,nLags=150)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
=======
update(jags.neg3, 10000)
jagssamples.nb3 <- jags.samples(jags.neg3, params3, n.iter = 50000)
codasamples.nb3 <- coda.samples(jags.neg3, params3, n.iter = 50000)
dicsamples.nb3 <- dic.samples(jags.neg3, params3, n.iter = 50000,type="pD")
summary(as.mcmc.list(jagssamples.nb3$beta.0))
summary(as.mcmc.list(jagssamples.nb3$beta.1))
summary(as.mcmc.list(jagssamples.nb3$size))
MBHtrue<-summary(as.mcmc.list(jagssamples.nb3$MBHtrue),quantiles=0.5)
pred.NBerr<-summary(as.mcmc.list(jagssamples.nb3$prediction.NB),quantiles=c(0.005,0.025,0.25,0.5,0.75,0.975, 0.995))
pred.NB2err<-data.frame(Type=GCS$Type,NGC=GCS$N_GC,MBHtrue=MBHtrue$quantiles,MBH=GCS$MBH,mean=pred.NBerr$statistics[,1],lwr1=pred.NBerr$quantiles[,3],lwr2=pred.NBerr$quantiles[,2],lwr3=pred.NBerr$quantiles[,1],upr1=pred.NBerr$quantiles[,5],upr2=pred.NBerr$quantiles[,6],upr3=pred.NBerr$quantiles[,7])
pred.NBerrx<-summary(as.mcmc.list(jagssamples.nb3$prediction.NBx),quantiles=c(0.005,0.025,0.25,0.5,0.75,0.975, 0.995))
pred.NB2errx<-data.frame(MBHx=MBHx,mean=pred.NBerrx$statistics[,1],lwr1=pred.NBerrx$quantiles[,3],lwr2=pred.NBerrx$quantiles[,2],lwr3=pred.NBerrx$quantiles[,1],upr1=pred.NBerrx$quantiles[,5],upr2=pred.NBerrx$quantiles[,6],upr3=pred.NBerrx$quantiles[,7])
require(aod)  # to get Crowder seed data
require(ggplot2)
require(rjags)
data(orob2)
orob2$proportion  <- orob2$y/orob2$n
orob2$plate <- 1: nrow(orob2)
orob2$group <- paste(orob2$root," : ", orob2$seed,sep='')
model <- factor(c('Logistic Model','Observed','Random Effect'))
seedplot <- ggplot(data=orob2, aes( x = plate,
y = proportion,
shape=group,
colour=factor('Observed'))) +
geom_point(size=3) +
scale_x_continuous("Plate") +
scale_y_continuous("Germination Proportion") +
scale_shape_discrete(name = "Root Extract:Seed",
breaks=unique(orob2$group)[c(1,2,3,4)]) +
scale_colour_manual(name='Observation/Prediction',
values=c('Logistic Model'='blue',
'Observed' = 'black',
'Random Effect' = 'green4'),
breaks=model)
seedplot
n <- 50
sdx <- 6
sdobs <- 5
taux <- 1 / (sdobs * sdobs)
truex <- rnorm(n, 0, sdx)
errorx <- rnorm(n, 0, sdobs)
obsx <- truex + errorx
# simulate response data
alpha <- 0
beta <- 10
sdy <- 20
errory <- rnorm(n, 0, sdy)
obsy <- alpha + beta*truex + errory
parms <- data.frame(alpha, beta)
jags_d <- list(x = obsx, y = obsy, n = length(obsx))
# write model
cat("
model{
## Priors
alpha ~ dnorm(0, .001)
beta ~ dnorm(0, .001)
sdy ~ dunif(0, 100)
tauy <- 1 / (sdy * sdy)
## Likelihood
for (i in 1:n){
mu[i] <- alpha + beta * x[i]
y[i] ~ dnorm(mu[i], tauy)
}
<<<<<<< HEAD
",
fill=TRUE, file="yerror.txt")
require(rjags)
# initiate model
mod1 <- jags.model("yerror.txt", data=jags_d,
n.chains=3, n.adapt=1000)
# simulate posterior
out <- coda.samples(mod1, n.iter=1000, thin=1,
variable.names=c("alpha", "beta", "sdy"))
# store parameter estimates
require(ggmcmc)
ggd <- ggs(out)
a <- ggd$value[which(ggd$Parameter == "alpha")]
b <- ggd$value[which(ggd$Parameter == "beta")]
d <- data.frame(a, b)
# specify model
cat("
model {
## Priors
alpha ~ dnorm(0, .001)
beta ~ dnorm(0, .001)
sdy ~ dunif(0, 100)
tauy <- 1 / (sdy * sdy)
taux ~ dunif(.03, .05)
## Likelihood
for (i in 1:n){
truex[i] ~ dnorm(0, .04)
x[i] ~ dnorm(truex[i], taux)
mu[i] <- alpha + beta * truex[i]
y[i] ~ dnorm(mu[i], tauy)
}
", fill=T, file="xyerror.txt")
# bundle data
jags_d <- list(x = obsx, y = obsy, n = length(obsx))
# initiate model
mod2 <- jags.model("xyerror.txt", data=jags_d,
n.chains=3, n.adapt=1000)
# simulate posterior
out <- coda.samples(mod2, n.iter=30000, thin=30,
variable.names=c("alpha", "beta", "tauy", "taux"))
# store parameter estimates
ggd <- ggs(out)
a2 <- ggd$value[which(ggd$Parameter == "alpha")]
b2 <- ggd$value[which(ggd$Parameter == "beta")]
d2 <- data.frame(a2, b2)
ggplot(d, aes(x=obsx, obsy)) +
geom_abline(aes(intercept=a, slope=b), data=d, color="red", alpha=0.05) +
geom_abline(aes(intercept=a2, slope=b2), data=d2, color="blue", alpha=0.05) +
geom_abline(aes(intercept=alpha, slope=beta),
data=parms, color="green", size=1.5, linetype="dashed") +
theme_bw() +
geom_point(shape=1, size=3) +
xlab("X values") + ylab("Observed Y values") +
ggtitle("Model results with and without modeling error in X")
library(rCharts)
library(reshape2)
library(minerva)
findata=iris[,c(1:3)] # removing first dummy column - the csv quirk - second column on Rank, and third column on School. Retaining only numeric vars here
corrmatrix<-mine(findata)$MIC #store corr matrix
# The following steps are generic and can all be placed in a function with some tweaks to customize output
corrdata=as.data.frame(corrmatrix)
corrdata$Variable1=names(corrdata)
corrdatamelt=melt(corrdata,id="Variable1")
names(corrdatamelt)=c("Variable1","Variable2","CorrelationCoefficient")
corrmatplot = rPlot(Variable2 ~ Variable1, color = 'CorrelationCoefficient', data = corrdatamelt, type = 'tile', height = 600)
corrmatplot$addParams(height = 400, width=800)
corrmatplot$guides("{color: {scale: {type: gradient2, lower: 'red',  middle: 'white', upper: 'blue',midpoint: 0}}}")
corrmatplot$guides(y = list(numticks = length(unique(corrdatamelt$Variable1))))
corrmatplot$guides(x = list(numticks = 3))
#corrmatplot$addParams(staggerLabels=TRUE)
corrmatplot
X=c(1,2,3,4)
Y=c(1,2,5,6)
base=data.frame(X,Y)
reg1=lm(Y~1+X,data=base)
nbase=data.frame(X=seq(0,5,by=.1))
Y1=predict(reg1,newdata=nbase)
plot(X,Y,pch=3,cex=1.5,lwd=2,xlab="",ylab="")
#qplot(X,Y)
lines(nbase$X,Y1,col="red",lwd=2)
u=2
mu=predict(reg1)[2]
sigma=summary(reg1)$sigma
y=seq(0,7,.05)
loi=dpois(round(y),lambda=1)
segments(u,y,loi+u,y,col="light green")
# lines(loi+u,y)
abline(v=u,lty=2)
points(X[2],Y[2],pch=3,cex=1.5,lwd=2)
points(X[2],predict(reg1)[2],pch=19,col="red")
arrows(u-.2,qnorm(.05,mu,sigma),
+ u-.2,qnorm(.95,mu,sigma),length=0.1,code=3,col="blue")
=======
ggplot(pred.NB2err,aes(x=MV_T,y=NGC))+
geom_ribbon(data=pred.NB2errx,aes(x=MV_Tx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.4, fill="gray") +
geom_ribbon(data=pred.NB2errx,aes(x=MV_Tx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.3, fill="gray") +
geom_ribbon(data=pred.NB2errx,aes(x=MV_Tx,y=mean,ymin=lwr3, ymax=upr3), alpha=0.2, fill="gray") +
geom_point(aes(colour=Type,shape=Type),size=3.25,alpha=0.7)+
geom_errorbar(guide="none",aes(colour=Type,ymin=NGC-N_low,ymax=NGC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(colour=Type,xmin=MV_T-GCS$err_MV_T,
xmax=MV_T+err_MV_T),alpha=0.7)+
geom_line(data=pred.NB2errx,aes(x=MV_Tx,y=mean),colour="gray25",linetype="dashed",size=1.2)+
scale_y_continuous(trans = 'asinh',breaks=c(0,10,100,1000,10000,100000),labels=c("0",expression(10^1),expression(10^2),
expression(10^3),expression(10^4),expression(10^5)))+
scale_colour_gdocs()+
scale_shape_manual(values=c(19,2,8,10))+scale_x_reverse()+
>>>>>>> Stashed changes
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
ylab("Autocorrelation")+
xlab("Lag")+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
ggs_autocorrelation(S.NB,nLags=200)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
ylab("Autocorrelation")+
xlab("Lag")
ggs_autocorrelation(S.NB,nLags=200)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
ylab("Autocorrelation")+
xlab("Lag")+
facet_grid(Parameter~Chain,labeller=label_parsed,scales = "free")
ggs_autocorrelation(S.NB,nLags=250)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
<<<<<<< Updated upstream
text = element_text(size=25))+
ylab("Autocorrelation")+
xlab("Lag")+
facet_grid(Parameter~Chain,labeller=label_parsed,scales = "free")
=======
text = element_text(size=25))
dev.off()
>>>>>>> origin/master
>>>>>>> Stashed changes
