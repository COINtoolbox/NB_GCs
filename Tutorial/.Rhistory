ylab("Value")+
xlab("Iteration")+theme(plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_pander()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
ylab("Value")+
xlab("Iteration")+theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_fivethirtyeight()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
ylab("Value")+
xlab("Iteration")+theme(plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_fivethirtyeight()
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_pander()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
ylab("Value")+
xlab("Iteration")+theme(plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_pander()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
ylab("Value")+
xlab("Iteration")+theme(plot.background = element_rect(fill = 'blue', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
pdf("chain2.pdf")
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_pander()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
ylab("Value")+
xlab("Iteration")+theme(plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
dev.off()
pdf("chain2.pdf")
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_pander(base_size = 15,nomargin = F)+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
ylab("Value")+
xlab("Iteration")+theme(plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
dev.off()
library(ggplot2)
library(MASS)     # glm.nb
library(COUNT)   # diagnostics
library(lmtest) # Likelihood test
library(gamlss.tr)# zero truncated model
#library(glmmADMB)  # GLMM
library(caret) # 10-fold
library(reshape) # melt
library(scales)
require(ggthemes)
require(Cairo)
require(plyr)
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
dim(GCS)
# Data exploration
G0<-GCS[,c("N_GC","Type","MBH","Mdyn","sig_e")]
G1<-melt(G0,id=c("N_GC","Type"))
varnames<-list(expression(log~M[BH]/M['\u0298']),expression(log~M[dyn]/M['\u0298']),
expression(sigma[e]*(km/s)),expression(R[e]*(kpc)))
G_labeller <- function(variable,value){
return(varnames[value])
}
N_err<-GCS$N_GC_err
lowMBH<-GCS$lowMBH
upMBH<-GCS$upMBH
err_sig_e<-GCS$err_sig_e
ggplot(GCS,aes(x=sig_e,y=N_GC,colour=Type,shape=Type))+geom_point(size=3)+
geom_errorbar(guide="none",aes(ymin=N_GC-N_err,ymax=N_GC+N_err),alpha=0.7)+
geom_errorbarh(aes(xmin=sig_e-err_sig_e,
xmax=sig_e+err_sig_e),alpha=0.7)+
scale_y_continuous(trans = 'log10',
breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+scale_shape_tremmel()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_pander(base_size = 15,nomargin = F)+
ylab(expression(N[GC]))+
xlab(expression(sigma~(km/s)))+theme(plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
ggplot(GCS,aes(x=sig_e,y=N_GC,colour=Type,shape=Type))+geom_point(size=3)+
geom_errorbar(guide="none",aes(ymin=N_GC-N_err,ymax=N_GC+N_err),alpha=0.7)+
geom_errorbarh(aes(xmin=sig_e-err_sig_e,
xmax=sig_e+err_sig_e),alpha=0.7)+
scale_y_continuous(trans = 'log10',
breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+scale_shape_tremmel()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_pander(base_size = 15,nomargin = F)+
ylab(expression(N[GC]))+
xlab(expression(sigma~(km/s)))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
ggplot(GCS,aes(x=sig_e,y=N_GC,colour=Type,shape=Type))+geom_point(size=3)+
geom_errorbar(guide="none",aes(ymin=N_GC-N_err,ymax=N_GC+N_err),alpha=0.7)+
geom_errorbarh(aes(xmin=sig_e-err_sig_e,
xmax=sig_e+err_sig_e),alpha=0.7)+
scale_y_continuous(trans = 'log10',
breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+scale_shape_tremmel()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_pander(base_size = 25,nomargin = F)+
ylab(expression(N[GC]))+
xlab(expression(sigma~(km/s)))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
ggplot(GCS,aes(x=sig_e,y=N_GC,colour=Type,shape=Type))+geom_point(size=3)+
geom_errorbar(guide="none",aes(ymin=N_GC-N_err,ymax=N_GC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(xmin=sig_e-err_sig_e,
xmax=sig_e+err_sig_e),alpha=0.7)+
scale_y_continuous(trans = 'log10',
breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+scale_shape_tremmel()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_pander(base_size = 25,nomargin = F)+
ylab(expression(N[GC]))+
xlab(expression(sigma~(km/s)))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
ggplot(GCS,aes(x=sig_e,y=N_GC,colour=Type,shape=Type))+geom_point(size=3)+
geom_errorbar(guide="none",aes(ymin=N_GC-N_err,ymax=N_GC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(xmin=sig_e-err_sig_e,
xmax=sig_e+err_sig_e),alpha=0.7)+
scale_y_continuous(trans = 'log10',
breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+scale_shape_tremmel()+scale_linetype_manual(guide="none")+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_pander(base_size = 25,nomargin = F)+
ylab(expression(N[GC]))+
xlab(expression(sigma~(km/s)))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
CairoPDF("sig_e.pdf",height=8,width=9,family="Symbol")
ggplot(GCS,aes(x=sig_e,y=N_GC,colour=Type,shape=Type))+geom_point(size=3)+
geom_errorbar(guide="none",aes(ymin=N_GC-N_err,ymax=N_GC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(xmin=sig_e-err_sig_e,
xmax=sig_e+err_sig_e),alpha=0.7)+
scale_y_continuous(trans = 'log10',
breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+scale_shape_tremmel()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_pander(base_size = 25,nomargin = F)+
ylab(expression(N[GC]))+
xlab(expression(sigma~(km/s)))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
dev.off()
CairoPNG("chain2.png")
ggs_traceplot(S2)+
scale_colour_gdocs()+theme_pander(base_size = 15,nomargin = F)+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
ylab("Value")+
xlab("Iteration")+theme(plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+
facet_grid(Parameter~.,labeller=label_parsed,scales = "free")
dev.off()
S1$Parameter<-revalue(S1$Parameter, c("beta.0"=expression(beta[0]), "beta.1"=expression(beta[1]),
"size"="k"))
S1<-ggs(samps)
samps
ggs(samps)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
S1<-ggs(samps)
samps2
plot(samps2)
gelman.diag(samps2)
S2<-ggs(samps2)
library(rjags)
library(ggplot2)
library(R2WinBUGS)
library(mcmcplots)
S1<-ggs(samps)
library(rjags)
library(ggplot2)
library(R2WinBUGS)
library(mcmcplots)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/COINtoolbox/NB_GCs/Tutorial")
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
dim(GCS)
glm.pois<-glm(N_GC ~ MBH, GCS, family="poisson")
glm.neg<-glm.nb(N_GC ~ MBH, GCS)
jags.data<-list(
N_GC = GCS$N_GC,
MBH = GCS$MBH,
N = nrow(GCS)
)
# Poisson version
k.bugs<-"model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Likelihood function
for (i in 1:N){
eta[i]<-beta.0+beta.1*MBH[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
N_GC[i]~dpois(mu[i])
}
}"
inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
params<-c("beta.0","beta.1")
jags.m<-jags.model(
data = jags.data,
inits = inits,
textConnection(k.bugs),
n.chains = 4,
n.adapt=1000
)
update(jags.m, 10000)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
S1<-ggs(samps)
str(samps)
require(R2jags)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
S1<-ggs(samps)
as.mcmc.rjags(samps)
summary(samps)
samps
ggs(samps)
library(ggmcmc)
library(rjags)
library(ggplot2)
library(R2WinBUGS)
require(R2jags)
library(ggmcmc)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/COINtoolbox/NB_GCs/Tutorial")
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
dim(GCS)
# run ML GLM to get initial values for jags
glm.pois<-glm(N_GC ~ MBH, GCS, family="poisson")
glm.neg<-glm.nb(N_GC ~ MBH, GCS)
jags.data<-list(
N_GC = GCS$N_GC,
MBH = GCS$MBH,
N = nrow(GCS)
)
# Poisson version
k.bugs<-"model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Likelihood function
for (i in 1:N){
eta[i]<-beta.0+beta.1*MBH[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
N_GC[i]~dpois(mu[i])
}
}"
inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
params<-c("beta.0","beta.1")
jags.m<-jags.model(
data = jags.data,
inits = inits,
textConnection(k.bugs),
n.chains = 4,
n.adapt=1000
)
update(jags.m, 10000)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
as.mcmc.rjags(samps)
S1<-ggs(samps)
samps
str(samps)
samps <- jags.samples(jags.m, params, n.iter = 10000)
summary(samps)
S1<-ggs(samps)
samps
summary(samps)
ggs(samps)
library(rjags)
library(ggmcmc)
library(rjags)
library(ggmcmc)
library(ggplot2)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/COINtoolbox/NB_GCs/Tutorial")
library(rjags)
library(ggmcmc)
library(ggplot2)
# GLM Jags
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
dim(GCS)
# run ML GLM to get initial values for jags
glm.pois<-glm(N_GC ~ MBH, GCS, family="poisson")
glm.neg<-glm.nb(N_GC ~ MBH, GCS)
jags.data<-list(
N_GC = GCS$N_GC,
MBH = GCS$MBH,
N = nrow(GCS)
)
# Poisson version
k.bugs<-"model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Likelihood function
for (i in 1:N){
eta[i]<-beta.0+beta.1*MBH[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
N_GC[i]~dpois(mu[i])
}
}"
inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
params<-c("beta.0","beta.1")
jags.m<-jags.model(
data = jags.data,
inits = inits,
textConnection(k.bugs),
n.chains = 4,
n.adapt=1000
)
update(jags.m, 10000)
samps <- jags.samples(jags.m, params, n.iter = 10000)
summary(samps)
S1<-ggs(samps)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
S1<-ggs(samps)
ggmcmc(ggs(samps), file = NULL)
samps
ggs(samps)
library(plyr)
S1$Parameter<-revalue(S1$Parameter, c("beta.0"=expression(beta[0]), "beta.1"=expression(beta[1]),
"size"="k"))
S1<-ggs(samps)
library(rjags)
library(ggmcmc)
library(ggplot2)
detach("package:mcmcplots", unload=TRUE)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/COINtoolbox/NB_GCs/Tutorial")
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
dim(GCS)
# run ML GLM to get initial values for jags
glm.pois<-glm(N_GC ~ MBH, GCS, family="poisson")
glm.neg<-glm.nb(N_GC ~ MBH, GCS)
jags.data<-list(
N_GC = GCS$N_GC,
MBH = GCS$MBH,
N = nrow(GCS)
)
# Poisson version
k.bugs<-"model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Likelihood function
for (i in 1:N){
eta[i]<-beta.0+beta.1*MBH[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
N_GC[i]~dpois(mu[i])
}
}"
inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
params<-c("beta.0","beta.1")
jags.m<-jags.model(
data = jags.data,
inits = inits,
textConnection(k.bugs),
n.chains = 4,
n.adapt=1000
)
update(jags.m, 10000)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
ggs(samps)
ggmcmc(ggs(samps), file = NULL)
S1<-ggs(samps)
ggs(samps)
detach("package:gamlss", unload=TRUE)
detach("package:gamlss.dist", unload=TRUE)
detach("package:gamlss.tr", unload=TRUE)
detach("package:caret", unload=TRUE)
detach("package:coda", unload=TRUE)
detach("package:R2WinBUGS", unload=TRUE)
detach("package:R2jags", unload=TRUE)
S1<-ggs(samps)
library(rjags)
library(ggmcmc)
library(ggplot2)
# GLM Jags
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
dim(GCS)
# run ML GLM to get initial values for jags
glm.pois<-glm(N_GC ~ MBH, GCS, family="poisson")
glm.neg<-glm.nb(N_GC ~ MBH, GCS)
jags.data<-list(
N_GC = GCS$N_GC,
MBH = GCS$MBH,
N = nrow(GCS)
)
# Poisson version
k.bugs<-"model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Likelihood function
for (i in 1:N){
eta[i]<-beta.0+beta.1*MBH[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
N_GC[i]~dpois(mu[i])
}
}"
inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
params<-c("beta.0","beta.1")
jags.m<-jags.model(
data = jags.data,
inits = inits,
textConnection(k.bugs),
n.chains = 4,
n.adapt=1000
)
update(jags.m, 10000)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
ggs(samps)
ggmcmc(ggs(samps), file = NULL)
S1<-ggs(samps)
S1$Parameter<-revalue(S1$Parameter, c("beta.0"=expression(beta[0]), "beta.1"=expression(beta[1]),
"size"="k"))
library(rjags)
library(ggmcmc)
library(ggplot2)
ggs(samps)
as.mcmc.rjags(samps)
require(mcmcplots)
as.mcmc.rjags(samps)
ggs(samps)
str(samps)
jags.m<-jags.model(
data = jags.data,
inits = inits,
textConnection(k.bugs),
n.chains = 3,
n.adapt=1000
)
update(jags.m, 10000)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
ggs(samps)
jags.m<-jags.model(
data = jags.data,
inits = inits,
textConnection(k.bugs),
n.chains = 4,
n.adapt=1000
)
update(jags.m, 10000)
samps <- coda.samples(jags.m, params, n.iter = 10000)
summary(samps)
ggs(samps)
ggs_traceplot(S1)
samps
dim(samps)
summary(samps)
install.packages(c("rmarkdown", "tcltk2"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
S1<-ggs(samps)
library(rjags)
library(ggmcmc)
library(ggplot2)
