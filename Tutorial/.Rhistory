which(Halo_ggplot$z==256)
which(Halo_ggplot$x==256)
Halo_ggplot[,which(Halo_ggplot$x==256)]
Halo_ggplot[which(Halo_ggplot$x==256),]
Halo_ggplot
dim(Halo_ggplot)
Halo_ggplot[which(Halo_ggplot$x==256),arr.ind=T]
Halo_ggplot[which(Halo_ggplot$x==256,arr.ind=T)]
which(Halo_ggplot$x==256,arr.ind=T)
which(Halo_ggplot$x==256)
which(Halo_ggplot$y==256)
which(Halo_ggplot$z==256)
Halo_ggplot[256,]
Halo_ggplot[which(Halo_ggplot$x==256)]
Halo_ggplot[which(Halo_ggplot$x==256),]
Halo_ggplot[which(Halo_ggplot$x==256),]<-0
Halo_ggplot[which(Halo_ggplot$x==256),]<-NA
Halo_ggplot[which(Halo_ggplot$x==256),]
Halo_ggplot
dim(Halo_ggplot)
Halo_ggplot[which(Halo_ggplot$x==256),]<-NA
Halo_ggplot[which(Halo_ggplot$y==256),]<-NA
Halo_ggplot[which(Halo_ggplot$z==256),]<-NA
p2<-ggplot(Halo_ggplot[,c(4,5,6,7,8)],aes(x=ion_fraction,group=redshift,fill=redshift,alpha=0.4))
p2a<-p2+geom_density(aes(y = ..density..,x=ion_fraction,group=redshift))+scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
facet_wrap(Model~parameter,scales="free")+  theme_economist_white(gray_bg=FALSE)+
xlab("")+scale_alpha(guide="none")
p2a
dim(na.omit(Halo_ggplot))
dim(Halo_ggplot)
Halo_ggplot2 <- na.omit(Halo_ggplot)
ggplot(Halo_ggplot2[,c(4,5,6,7,8)],aes(x=ion_fraction,group=redshift,fill=redshift,alpha=0.4))
p2a<-p2+geom_density(aes(y = ..density..,x=ion_fraction,group=redshift))+scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
facet_wrap(Model~parameter,scales="free")+  theme_economist_white(gray_bg=FALSE)+
xlab("")+scale_alpha(guide="none")
p2<-ggplot(Halo_ggplot2[,c(4,5,6,7,8)],aes(x=ion_fraction,group=redshift,fill=redshift,alpha=0.4))
p2a<-p2+geom_density(aes(y = ..density..,x=ion_fraction,group=redshift))+scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
facet_wrap(Model~parameter,scales="free")+  theme_economist_white(gray_bg=FALSE)+
xlab("")+scale_alpha(guide="none")
p2a
install.packages("drCCA")
#
# This function executes the specified SQL query on a GAVO website
#
# Warning, no sophisticated error handling, caller must check result
#
gavoWebQuery <- function(url="http://gavo.mpa-garching.mpg.de/MyMillennium?action=doQuery&", user="", password="", sql)
{
url<-paste(url,"SQL=",sep="")
cmd<-paste("wget --quiet --http-user=",user," --http-passwd=",password," -O - \"",url,sql,"\"",sep="")
res<-system(cmd,intern=TRUE)
if(length(res) == 0)
result = "ERROR check your web address, user or password"
else {
if(res[1] == "#OK")
result<-read.table(textConnection(res),header=TRUE, sep=",",colClasses="numeric")
else
result<-res
}
result
}
sql<-"select *
from Guo2013a..MR7
where snapnum = 63
and np between 300 and 100000"
Millenium<-gavoWebQuery(sql=sql, user="rafael",password="Gl8Kriju9")
Millenium
sql<-"select *
from Guo2013a..MR7
where snapnum = 63
"
)"
sql<-"select *
from Guo2013a..MR7
where snapnum = 63"
Millenium<-gavoWebQuery(sql=sql, user="rafael",password="Gl8Kriju9")
Millenium
sql<-"select *
from Guo2013a..MR7
where snapnum = 67"
Millenium<-gavoWebQuery(sql=sql, user="rafael",password="Gl8Kriju9")
Millenium
sql<-"select *
from Guo2013a..MR7
where snapnum = 60"
Millenium<-gavoWebQuery(sql=sql, user="rafael",password="Gl8Kriju9")
Millenium
#
# This function executes the specified SQL query on a GAVO website
#
# Warning, no sophisticated error handling, caller must check result
#
gavoWebQuery <- function(url="http://gavo.mpa-garching.mpg.de/MyMillennium?action=doQuery&", user="", password="", sql)
{
url<-paste(url,"SQL=",sep="")
cmd<-paste("wget --quiet --http-user=",user," --http-passwd=",password," -O - \"",url,sql,"\"",sep="")
res<-system(cmd,intern=TRUE)
if(length(res) == 0)
result = "ERROR check your web address, user or password"
else {
if(res[1] == "#OK")
result<-read.table(textConnection(res),header=TRUE, sep=",",colClasses="numeric")
else
result<-res
}
result
}
sql<-"select *
from mpamocks..Blaizot2006_AllSky_RT_1
and np between 100 and 100000"
Millenium<-gavoWebQuery(sql=sql, user="rafael",password="Gl8Kriju9")
sql<-"select *
from mpamocks..Blaizot2006_AllSky_RT_1
where np between 100 and 100000"
#http://gavo.mpa-garching.mpg.de/MyMillennium/MyDB
#webAppUrl<-"http://gavo.mpa-garching.mpg.de/MyMillennium?"
#Millenium<-gavoWebQuery(sql=sql, user="rafael",password="Gl8Kriju9")
Millenium<-gavoWebQuery(sql=sql, user="rafael",password="Gl8Kriju9")
write.table(Millenium, file="/Users/rafael/Dropbox/artigos/Meusartigos/Feature_extraction_SR_R/CODE/data/Millenium_Blaizot2006.dat",row.names = FALSE)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/COINtoolbox/NB_GCs/Tutorial")
#Poisson and NB regression using JAGS by Rafael S. de Souza
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
facet_wrap_labeller <- function(gg.plot,labels=NULL) {
#works with R 3.0.1 and ggplot2 0.9.3.1
require(gridExtra)
g <- ggplotGrob(gg.plot)
gg <- g$grobs
strips <- grep("strip_t", names(gg))
for(ii in seq_along(labels))  {
modgrob <- getGrob(gg[[strips[ii]]], "strip.text",
grep=TRUE, global=TRUE)
gg[[strips[ii]]]$children[[modgrob$name]] <- editGrob(modgrob,label=labels[ii])
}
g$grobs <- gg
class(g) = c("arrange", "ggplot",class(g))
g
}
give.n <- function(x){
return(c(y = 0.5, label = length(x)))
# experiment with the multiplier to find the perfect position
}
################
# Read data
GCS = read.csv(file="..//Dataset//GCs.csv",header=TRUE,dec=".",sep="")
GCS = subset(GCS, !is.na(Mdyn)) # 1 removed
dim(GCS)
N_err<-GCS$N_GC_err
lowMBH<-GCS$lowMBH
upMBH<-GCS$upMBH
err_sig_e<-GCS$err_sig_e
######## NB with errors ########################################################
jags.data3 <- list(
N_GC = GCS$N_GC,
MBH = GCS$MBH,
errN_GC = GCS$N_GC_err,
N = nrow(GCS),
errMBH = upMBH
#  meanx = mean(GCS$MBH),
#  varx = var (GCS$MBH)
)
#model.NB <- "model{
# Priors for regression coefficients
#beta.0~dnorm(0,0.000001)
#beta.1~dnorm(0,0.000001)
# Prior for size
#size~dunif(0.001,5)
# Likelihood function
#for (i in 1:N){
#MBHtrue[i]~dnorm(MBH[i],1/errMBH[i]^2);
#errorN[i]~dbin(0.5,2*errN_GC[i])
#eta[i]<-beta.0+beta.1*MBHtrue[i]+exp(errorN[i]-errN_GC[i])
#log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
#p[i]<-size/(size+mu[i])
#N_GC[i]~dnegbin(p[i],size)
# Prediction
#prediction.NB[i]~dnegbin(p[i],size)
#}
#}"
model.NB <- "model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Prior for size
size~dunif(0.001,5)
# Hyperpriors
meanx ~ dgamma(30,3)
varx ~ dgamma(2,1)
for (i in 1:N){
#MBHtrue[i]~dunif(5,12)
# MBHtrue[i]~dnorm(8,0.000001) # this would be sensible too
MBHtrue[i] ~ dgamma(meanx^2/varx,meanx/varx)T(5,12)
}
# Likelihood function
for (i in 1:N){
MBH[i]~dnorm(MBHtrue[i],1/errMBH[i]^2);
errorN[i]~dbin(0.5,2*errN_GC[i])
eta[i]<-beta.0+beta.1*MBHtrue[i]+exp(errorN[i]-errN_GC[i])
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
p[i]<-size/(size+mu[i])
N_GC[i]~dnegbin(p[i],size)
# Prediction
prediction.NB[i]~dnegbin(p[i],size)
}
}"
inits3 <- list(beta.0=0,beta.1=0,size=0.1)
params3 <- c("beta.0","beta.1","size","prediction.NB","MBHtrue")
jags.neg3 <- jags.model(
data = jags.data3,
inits = inits3,
textConnection(model.NB),
n.chains = 3,
n.adapt=1000
)
update(jags.neg3, 25000)
jagssamples.nb3 <- jags.samples(jags.neg3, params3, n.iter = 100000)
codasamples.nb3 <- coda.samples(jags.neg3, params3, n.iter = 150000)
summary(as.mcmc.list(jagssamples.nb3$beta.0))
summary(as.mcmc.list(jagssamples.nb3$beta.1))
summary(as.mcmc.list(jagssamples.nb3$size))
S.NB1<-ggs(codasamples.nb3 ,family=c("beta"))
S.NB2<-ggs(codasamples.nb3,family=c("size"))
S.NB<-rbind(S.NB1,S.NB2,deparse.level=2)
S.NB$Parameter<-revalue(S.NB$Parameter, c("beta.0"=expression(beta[0]), "beta.1"=expression(beta[1]),
"size"="k"))
ggs_density(S.NB)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+xlab("Parameter  value")+ylab("Density")
MBHtrue<-summary(as.mcmc.list(jags.samples(jags.neg3, params3, n.iter = 50000)$MBHtrue),quantiles=0.5)
pred.NBerr<-summary(as.mcmc.list(jagssamples.nb3$prediction.NB),quantiles=c(0.005,0.025,0.25,0.5,0.75,0.975, 0.995))
pred.NB2err<-data.frame(Type=GCS$Type,NGC=GCS$N_GC,MBH=GCS$MBH,mean=pred.NBerr$quantiles[,4],lwr1=pred.NBerr$quantiles[,3],lwr2=pred.NBerr$quantiles[,2],lwr3=pred.NBerr$quantiles[,1],upr1=pred.NBerr$quantiles[,5],upr2=pred.NBerr$quantiles[,6],upr3=pred.NBerr$quantiles[,7])
ggplot(pred.NB2err,aes(x=MBH,y=NGC))+
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr1, ymax=upr1), alpha=0.3, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr2, ymax=upr2), alpha=0.2, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr3, ymax=upr3), alpha=0.1, fill="gray") +
geom_point(aes(colour=Type,shape=Type),size=3.25)+
geom_errorbar(guide="none",aes(colour=Type,ymin=NGC-N_err,ymax=NGC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(colour=Type,xmin=MBH-GCS$lowMBH,
xmax=MBH+upMBH),alpha=0.7)+
geom_smooth(aes(x=MBHtrue,y=mean),colour="gray25",linetype="dashed",size=1.2,method="lm",level = 0)+
scale_y_continuous(trans = 'log10',breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+
scale_shape_manual(values=c(19,2,8))+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_hc()+
ylab(expression(N[GC]))+
xlab(expression(log~M[BH]/M['\u0298']))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
MBHtrue
MBHtrue$quantiles
pred.NB2err<-data.frame(Type=GCS$Type,NGC=GCS$N_GC,MBHtrue=MBHtrue$quantiles,MBH=GCS$MBH,mean=pred.NBerr$quantiles[,4],lwr1=pred.NBerr$quantiles[,3],lwr2=pred.NBerr$quantiles[,2],lwr3=pred.NBerr$quantiles[,1],upr1=pred.NBerr$quantiles[,5],upr2=pred.NBerr$quantiles[,6],upr3=pred.NBerr$quantiles[,7])
ggplot(pred.NB2err,aes(x=MBH,y=NGC))+
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr1, ymax=upr1), alpha=0.3, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr2, ymax=upr2), alpha=0.2, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr3, ymax=upr3), alpha=0.1, fill="gray") +
geom_point(aes(colour=Type,shape=Type),size=3.25)+
geom_errorbar(guide="none",aes(colour=Type,ymin=NGC-N_err,ymax=NGC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(colour=Type,xmin=MBH-GCS$lowMBH,
xmax=MBH+upMBH),alpha=0.7)+
geom_smooth(aes(x=MBHtrue,y=mean),colour="gray25",linetype="dashed",size=1.2,method="lm",level = 0)+
scale_y_continuous(trans = 'log10',breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+
scale_shape_manual(values=c(19,2,8))+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_hc()+
ylab(expression(N[GC]))+
xlab(expression(log~M[BH]/M['\u0298']))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
ggplot(pred.NB2err,aes(x=MBH,y=NGC))+
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr1, ymax=upr1), alpha=0.3, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr2, ymax=upr2), alpha=0.2, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr3, ymax=upr3), alpha=0.1, fill="gray") +
geom_point(aes(colour=Type,shape=Type),size=3.25)+
geom_errorbar(guide="none",aes(colour=Type,ymin=NGC-N_err,ymax=NGC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(colour=Type,xmin=MBH-GCS$lowMBH,
xmax=MBH+upMBH),alpha=0.7)+
geom_line(aes(x=MBHtrue,y=mean),colour="gray25",linetype="dashed",size=1.2)+
scale_y_continuous(trans = 'log10',breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+
scale_shape_manual(values=c(19,2,8))+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_hc()+
ylab(expression(N[GC]))+
xlab(expression(log~M[BH]/M['\u0298']))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
pred.NBerr
pred.NBerr$mean
str(pred.NBerr)
pred.NBerr$Statistics
pred.NBerr$statistics
pred.NB2err<-data.frame(Type=GCS$Type,NGC=GCS$N_GC,MBHtrue=MBHtrue$quantiles,MBH=GCS$MBH,mean=pred.NBerr$statistics[,1],lwr1=pred.NBerr$quantiles[,3],lwr2=pred.NBerr$quantiles[,2],lwr3=pred.NBerr$quantiles[,1],upr1=pred.NBerr$quantiles[,5],upr2=pred.NBerr$quantiles[,6],upr3=pred.NBerr$quantiles[,7])
ggplot(pred.NB2err,aes(x=MBH,y=NGC))+
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr1, ymax=upr1), alpha=0.3, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr2, ymax=upr2), alpha=0.2, fill="gray") +
geom_ribbon(aes(x=MBHtrue,y=mean,ymin=lwr3, ymax=upr3), alpha=0.1, fill="gray") +
geom_point(aes(colour=Type,shape=Type),size=3.25)+
geom_errorbar(guide="none",aes(colour=Type,ymin=NGC-N_err,ymax=NGC+N_err),alpha=0.7)+
geom_errorbarh(guide="none",aes(colour=Type,xmin=MBH-GCS$lowMBH,
xmax=MBH+upMBH),alpha=0.7)+
geom_line(aes(x=MBHtrue,y=mean),colour="gray25",linetype="dashed",size=1.2)+
scale_y_continuous(trans = 'log10',breaks=trans_breaks("log10",function(x) 10^x),
labels=trans_format("log10",math_format(10^.x)))+
scale_colour_gdocs()+
scale_shape_manual(values=c(19,2,8))+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme_hc()+
ylab(expression(N[GC]))+
xlab(expression(log~M[BH]/M['\u0298']))+theme(legend.position="top",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))
ggs_density(S.NB)+
scale_colour_economist(guide="none")+
theme_hc()+
scale_fill_economist()+
#  theme_economist_white(gray_bg = F, base_size = 11, base_family = "sans")+
theme(strip.background = element_rect(fill="gray95"),plot.background = element_rect(fill = 'white', colour = 'white'),
legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=25))+xlab("Parameter  value")+ylab("Density")
install.packages("jagsUI", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("jagsUI", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(longley)
gnp <- longley$GNP
employed <- longley$Employed
n <- length(employed)
data <- list(gnp=gnp,employed=employed,n=n)
#Read in BUGS model file
#Note calculation of discrepancy stats fit and fit.new
#(sums of residuals)
writeLines("
model{
#Likelihood
for (i in 1:n){
employed[i] ~ dnorm(mu[i], tau)
mu[i] <- alpha + beta*gnp[i]
res[i] <- employed[i] - mu[i]
emp.new[i] ~ dnorm(mu[i], tau)
res.new[i] <- emp.new[i] - mu[i]
}
#Priors
alpha ~ dnorm(0, 0.00001)
beta ~ dnorm(0, 0.00001)
sigma ~ dunif(0,1000)
tau <- pow(sigma,-2)
#Derived parameters
fit <- sum(res[])
fit.new <- sum(res.new[])
}
", con="model.txt")
#Identify filepath of model file;
#in this case in the working directory
modfile <- 'model.txt'
#Set parameters to monitor
params <- c('alpha','beta','sigma','fit','fit.new')
#Run analysis
out <- jags(data = data,
inits = NULL,
parameters.to.save = params,
model.file = modfile,
n.chains = 3,
n.adapt = 100,
n.iter = 1000,
n.burnin = 500,
n.thin = 2)
#Examine output summary
out
#Posterior predictive check plot
pp.check(out, actual = 'fit', new = 'fit.new')
out
jags.neg3$BUGSoutput$
sims.list
jags.neg3$BUGSoutput
library(R2jags)
detach("package:jagsUI", unload=TRUE)
library(R2jags)
jags.neg3 <- jags.parallel(
data = jags.data3,
inits = inits3,
textConnection(model.NB),
n.chains = 3,
n.adapt=1000
)
recompile(jags.neg3)
jags.neg3<-update(jags.neg3, 25000)
jags.neg3 <- jags.parallel(
data = jags.data3,
inits = inits3,
textConnection(model.NB),
n.chains = 3
)
recompile(jags.neg3)
jags.neg3<-update(jags.neg3, 25000)
vignette("Rcpp-introduction")
Sys.setenv("PKG_CXXFLAGS"="-std=c++11")
#include <Rcpp.h>
// Enable C++11 via this plugin (Rcpp 0.10.3 or later)
// [[Rcpp::plugins(cpp11)]]
// [[Rcpp::export]]
int useAuto() {
auto val = 42;  	// val will be of type int
return val;
}
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
#include <Rcpp.h>
// Enable C++11 via this plugin (Rcpp 0.10.3 or later)
// [[Rcpp::plugins(cpp11)]]
// [[Rcpp::export]]
int useAuto() {
auto val = 42;  	// val will be of type int
return val;
}
int useAuto() {
auto val = 42;  	// val will be of type int
return val;
}
include <Rcpp.h>
// [[Rcpp::depends(RcppGSL)]]
#include <RcppGSL.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>
// [[Rcpp::export]]
Rcpp::NumericVector colNorm(Rcpp::NumericMatrix sM) {
RcppGSL::matrix<double> M(sM);   // create gsl data structures from SEXP
int k = M.ncol();
Rcpp::NumericVector n(k); 		// to store results
for (int j = 0; j < k; j++) {
RcppGSL::vector_view<double> colview = gsl_matrix_column (M, j);
n[j] = gsl_blas_dnrm2(colview);
}
M.free() ;                          // important: GSL wrappers use C structure
return n;				// return vector
}
cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
cppFunction(10)
cppFunction(3)
install.packages(c("RcppArmadillo", "RcppEigen"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Rcpp::sourceCpp('~/Desktop/timesTwo.cpp')
timesTwo(21)
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
Sys.setenv("PKG_CXXFLAGS"="-std=c++11")
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
x <- c(1,2,3,4)
y <- c(2,2,3,3)
transformEx2(x,y)
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
transformEx(x)
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
x <- c(1,2,3,4)
transformEx(x)
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
install.packages("RcppGSL", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RcppGSL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:RcppGSL", unload=TRUE)
library("RcppGSL", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RcppGSL", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
install.packages('gsl',type = 'source')
Rcpp::sourceCpp('~/Desktop/transformEx.cpp')
set.seed(42)
X <- matrix(rnorm(4*4), 4, 4)
Z <- X %*% t(X)
getEigenValues(Z)
30/3
30/9
100/4
8^2/4
8^2/2
1/3
30/(0.3^2)
30/9
2/1
var=2
30/9
sqrt(30/9)
